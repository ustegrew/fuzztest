/* -----------------------------------------------------------------------------
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------------- */

package fuzztest.generator;

/**
 * Browseable object, i.e. can be stored in the {@link TRepository}. Provides 
 * manual and automatic key generation. 
 * 
 * @author peter
 */
public abstract class VBrowseable
{
    private static int      gCounter = -1;
    
    private String          fClassID;
    private String          fKey;
    
    
    /**
     * cTor. 
     */
    public VBrowseable ()
    {
        fClassID    = getClass ().getCanonicalName ();
        fKey        = null;
    }
    
    /**
     * @return      The key associated with this object. 
     */
    public String GetKey ()
    {
        return fKey;
    }
    
    /**
     * Assigns an autogenerated key, usually from the cTor of the concrete sub class.
     * Then registers this object with the repository.
     * 
     *  @throws IllegalArgumentException if a key has already been assigned before.
     */
    protected void _Register ()
    {
        _Register (null, true);
    }
    
    /**
     * Assigns the given key to this object. Key can only be assigned once. Used by rules
     * that have their ID property set in the given grammar.
     * Then registers this object with the repository.
     * 
     * @param   key       The key to be assigned.
     * @throws  IllegalArgumentException if a key has already been assigned.
     */
    protected void _Register (String key)
    {
        _Register (key, false);
    }
    
    private void _Register (String key, boolean doAutoKey)
    {
        if (fKey != null)
        {
            throw new IllegalArgumentException ("Key is already assigned.");
        }
        
        if (doAutoKey)
        {
            gCounter++;
            fKey = fClassID + "_" + gCounter;
        }
        else
        {
            fKey = key;
        }
        
        TRepository.Add (this);
    }
}
